# -*- coding: utf-8 -*-
"""Homework1_stub.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ww_AHe7Og4VNbqG1IZuvMPWI5c9v4l0y
"""

import json
from matplotlib import pyplot as plt
from collections import defaultdict
from sklearn import linear_model
import numpy
import random
import gzip
import math
import sklearn

def assertFloat(x): # Checks that an answer is a float
    assert type(float(x)) == float

def assertFloatList(items, N):
    assert len(items) == N
    assert [type(float(x)) for x in items] == [float]*N

f = gzip.open("young_adult_10000.json.gz")
dataset = []
for l in f:
    dataset.append(json.loads(l))

len(dataset)

answers = {} # Put your answers to each question in this dictionary

dataset[1]

### Question 1

def feature(d):
    # your implementation
    feat = [1]
    feat.append(d['review_text'].count("!"))
    return feat

ratings = [d['rating'] for d in dataset]
num_excl = [d['review_text'].count("!") for d in dataset]

plt.scatter(num_excl, ratings, color='grey')
plt.xlim(0, 80)
plt.ylim(0.5, 5.5)
plt.xlabel("Num of exclamation marks")
plt.ylabel("Rating")
plt.title("Rating vs. number of exclamation marks")
plt.show()

X = numpy.matrix([feature(d) for d in dataset])
Y = numpy.matrix(ratings).T

model = sklearn.linear_model.LinearRegression(fit_intercept=False)
model.fit(X, Y)

theta,residuals,rank,s = numpy.linalg.lstsq(X, Y, rcond=None)
theta0 = numpy.squeeze(numpy.asarray(theta))[0]
theta1 = numpy.squeeze(numpy.asarray(theta))[1]
theta

y_pred = model.predict(X)

sse = sum([x**2 for x in (Y - y_pred)])
mse = sse / len(Y)
mse = numpy.squeeze(numpy.asarray(mse))
mse = mse.ravel()[0]
mse

xplot = numpy.arange(0,80,1)
yplot = [(theta[0] + theta[1]*x).item() for x in xplot]

plt.scatter(num_excl, ratings, color='grey')
plt.plot(numpy.array(xplot), yplot, color = 'k', linestyle = '--',\
         label = r"$3.689 + 7.109 \times 10^{-2} \mathit{length}$")
plt.xlim(0, 80)
plt.ylim(0.5, 5.5)
plt.xlabel("Num of exclamation marks")
plt.ylabel("Rating")
plt.title("Rating vs. number of exclamation marks")
plt.legend(loc='lower right')
plt.show()

answers['Q1'] = [theta0, theta1, mse]
answers['Q1']

assertFloatList(answers['Q1'], 3) # Check the format of your answer (three floats)

### Question 2

def feature(d):
    # your implementation
    feat = [1]
    feat.append(len(d['review_text'])) # Length of review
    feat.append(d['review_text'].count("!"))
    return feat

X = numpy.matrix([feature(d) for d in dataset])
Y = numpy.matrix(ratings).T

model = sklearn.linear_model.LinearRegression(fit_intercept=False)
model.fit(X, Y)
theta = model.coef_
theta0 = theta[0][0]
theta1 = theta[0][1]
theta2 = theta[0][2]
theta

y_pred = model.predict(X)
sse = sum([x**2 for x in (Y - y_pred)])
mse = sse / len(Y)
mse = numpy.squeeze(numpy.asarray(mse))
mse = mse.ravel()[0]
mse

answers['Q2'] = [theta0, theta1, theta2, mse]

assertFloatList(answers['Q2'], 4)

### Question 3

mses = []

def feature(d, deg):
    # feature for a specific polynomial degree
    feat = [1]
    for i in range(1, deg):
        feat.append(d['review_text'].count("!")**i)
    # print(feat)
    return feat

Y = numpy.matrix(ratings).T
for i in range(1, 6):
    X = numpy.matrix([feature(d, i) for d in dataset])
    model = sklearn.linear_model.LinearRegression(fit_intercept=False)
    model.fit(X, Y)
    y_pred = model.predict(X)
    sse = sum([x**2 for x in (Y - y_pred)])
    mse = sse / len(Y)
    mse = numpy.squeeze(numpy.asarray(mse))
    mse = mse.ravel()[0]
    mses.append(mse)
    print("Polynomial to the power of " + str(i) + ": " + str(mse))

answers['Q3'] = mses

assertFloatList(answers['Q3'], 5)# List of length 5

### Question 4

mses2 = []

numpy.matrix([feature(d, 3) for d in X_test])

half = int(len(dataset) / 2)
X_train = dataset[:half]
X_test = dataset[half:]
Y_train = numpy.matrix(ratings[:half]).T
Y_test = numpy.matrix(ratings[half:]).T

for i in range(1, 6):
    XTrain = numpy.matrix([feature(d, i) for d in X_train])
    XTest = numpy.matrix([feature(d, i) for d in X_test])
    model = sklearn.linear_model.LinearRegression(fit_intercept=False)
    model.fit(XTrain, Y_train)
    y_pred = model.predict(XTest)
    sse = sum([x**2 for x in (Y_test - y_pred)])
    mse = sse / len(Y_test)
    mse = numpy.squeeze(numpy.asarray(mse))
    mse = mse.ravel()[0]
    mses2.append(mse)
    print("Polynomial to the power of " + str(i) + ": " + str(mse))

answers['Q4'] = mses2

assertFloatList(answers['Q4'], 5)

### Question 5

XTrain = numpy.matrix([feature(d, 1) for d in X_train])
XTest = numpy.matrix([feature(d, 1) for d in X_test])
model = sklearn.linear_model.LinearRegression(fit_intercept=False)
model.fit(XTrain, Y_train)
y_pred = model.predict(XTest)
sse = sum([x for x in abs(Y_test - y_pred)])
mae = sse / len(Y_test)
mae = numpy.squeeze(numpy.asarray(mae))
mae = mae.ravel()[0]
mae

answers['Q5'] = mae

assertFloat(answers['Q5'])

### Question 6

f = open("beer_50000.json")
dataset = []
for l in f:
    if 'user/gender' in l:
        dataset.append(eval(l))

X = [[1, d['review/text'].count("!")] for d in dataset]
y = [d['user/gender'] == 'Female' for d in dataset]

mod = sklearn.linear_model.LogisticRegression()
mod.fit(X,y)

predictions = mod.predict(X) # Binary vector of predictions
correct = predictions == y # Binary vector indicating which predictions were correct
sum(correct) / len(correct)

TP = sum([(p and l) for (p,l) in zip(predictions, y)])
FP = sum([(p and not l) for (p,l) in zip(predictions, y)])
TN = sum([(not p and not l) for (p,l) in zip(predictions, y)])
FN = sum([(not p and l) for (p,l) in zip(predictions, y)])

TPR = TP / (TP + FN)
TNR = TN / (TN + FP)
TPR,TNR

BER = 1 - 1/2 * (TPR + TNR)
BER

answers['Q6'] = [TP, TN, FP, FN, BER]

assertFloatList(answers['Q6'], 5)

### Question 7

mod = sklearn.linear_model.LogisticRegression(class_weight='balanced')
mod.fit(X,y)
predictions = mod.predict(X)

# Accuracy
correct = predictions == y
sum(correct) / len(correct)

TP = sum([(p and l) for (p,l) in zip(predictions, y)])
FP = sum([(p and not l) for (p,l) in zip(predictions, y)])
TN = sum([(not p and not l) for (p,l) in zip(predictions, y)])
FN = sum([(not p and l) for (p,l) in zip(predictions, y)])

print("TP = " + str(TP))
print("FP = " + str(FP))
print("TN = " + str(TN))
print("FN = " + str(FN))

TPR = TP / (TP + FN)
TNR = TN / (TN + FP)
TPR,TNR

BER = 1 - 1/2 * (TPR + TNR)
BER

answers["Q7"] = [TP, TN, FP, FN, BER]

assertFloatList(answers['Q7'], 5)

### Question 8

precision = TP / (TP + FP)
recall = TP / (TP + FN)
precision, recall

temp = predictions[0:100]
temp_y = y[0:100]
TP = sum([(p and l) for (p,l) in zip(temp, temp_y)])
FP = sum([(p and not l) for (p,l) in zip(temp, temp_y)])
TP,FP

K = [1, 10, 100, 1000, 10000]
precisionList = []
for k in K:
    temp_predictions = predictions[0:k]
    temp_y = y[0:k]
    TP = sum([(p and l) for (p,l) in zip(temp_predictions, temp_y)])
    FP = sum([(p and not l) for (p,l) in zip(temp_predictions, temp_y)])
    precision = TP / (TP + FP)
    if math.isnan(precision):
        precision = 0.0
    precisionList.append(precision)

answers['Q8'] = precisionList

assertFloatList(answers['Q8'], 5) #List of five floats

f = open("answers_hw1.txt", 'w') # Write your answers to a file
f.write(str(answers) + '\n')
f.close()

answers

